syntax = "proto3";

import public "solana-storage.proto";

option go_package = "github.com/rpcpool/solana-geyser-grpc/golang/proto";

package geyser;

service Geyser {
  rpc Subscribe(stream SubscribeRequest) returns (stream SubscribeUpdate) {}
  rpc Ping(PingRequest) returns (PongResponse) {}
  rpc GetLatestBlockhash(GetLatestBlockhashRequest) returns (GetLatestBlockhashResponse) {}
  rpc GetBlockHeight(GetBlockHeightRequest) returns (GetBlockHeightResponse) {}
  rpc GetSlot(GetSlotRequest) returns (GetSlotResponse) {}
}

message SubscribeRequest {
  map<string, SubscribeRequestFilterAccounts> accounts = 1;
  map<string, SubscribeRequestFilterSlots> slots = 2;
  map<string, SubscribeRequestFilterTransactions> transactions = 3;
  map<string, SubscribeRequestFilterBlocks> blocks = 4;
  map<string, SubscribeRequestFilterBlocksMeta> blocks_meta = 5;
}

message SubscribeRequestFilterAccounts {
  repeated string account = 2;
  repeated string owner = 3;
  repeated SubscribeRequestFilterAccountsFilter filters = 4;
}

message SubscribeRequestFilterAccountsFilter {
  oneof filter {
    SubscribeRequestFilterAccountsFilterMemcmp memcmp = 1;
    uint64 datasize = 2;
  }
}

message SubscribeRequestFilterAccountsFilterMemcmp {
  uint64 offset = 1;
  oneof data {
    bytes bytes = 2;
    string base58 = 3;
    string base64 = 4;
  }
}

message SubscribeRequestFilterSlots {}

message SubscribeRequestFilterTransactions {
  optional bool vote = 1;
  optional bool failed = 2;
  optional string signature = 5;
  repeated string account_include = 3;
  repeated string account_exclude = 4;
}

message SubscribeRequestFilterBlocks {}

message SubscribeRequestFilterBlocksMeta {}

message SubscribeUpdate {
  repeated string filters = 1;
  oneof update_oneof {
    SubscribeUpdateAccount account = 2;
    SubscribeUpdateSlot slot = 3;
    SubscribeUpdateTransaction transaction = 4;
    SubscribeUpdateBlock block = 5;
    SubscribeUpdatePing ping = 6;
    SubscribeUpdateBlockMeta block_meta = 7;
  }
}

message SubscribeUpdateAccount {
  SubscribeUpdateAccountInfo account = 1;
  uint64 slot = 2;
  bool is_startup = 3;
}

message SubscribeUpdateAccountInfo {
  bytes pubkey = 1;
  uint64 lamports = 2;
  bytes owner = 3;
  bool executable = 4;
  uint64 rent_epoch = 5;
  bytes data = 6;
  uint64 write_version = 7;
  optional bytes txn_signature = 8;
}

message SubscribeUpdateSlot {
  uint64 slot = 1;
  optional uint64 parent = 2;
  SubscribeUpdateSlotStatus status = 3;
}

enum SubscribeUpdateSlotStatus {
  PROCESSED = 0;
  CONFIRMED = 1;
  FINALIZED = 2;
}

message SubscribeUpdateTransaction {
  SubscribeUpdateTransactionInfo transaction = 1;
  uint64 slot = 2;
}

message SubscribeUpdateTransactionInfo {
  bytes signature = 1;
  bool is_vote = 2;
  solana.storage.ConfirmedBlock.Transaction transaction = 3;
  solana.storage.ConfirmedBlock.TransactionStatusMeta meta = 4;
  uint64 index = 5;
}

message SubscribeUpdateBlock {
  uint64 slot = 1;
  string blockhash = 2;
  solana.storage.ConfirmedBlock.Rewards rewards = 3;
  solana.storage.ConfirmedBlock.UnixTimestamp block_time = 4;
  solana.storage.ConfirmedBlock.BlockHeight block_height = 5;
  repeated SubscribeUpdateTransactionInfo transactions = 6;
  uint64 parent_slot = 7;
  string parent_blockhash = 8;
}

message SubscribeUpdateBlockMeta {
  uint64 slot = 1;
  string blockhash = 2;
  solana.storage.ConfirmedBlock.Rewards rewards = 3;
  solana.storage.ConfirmedBlock.UnixTimestamp block_time = 4;
  solana.storage.ConfirmedBlock.BlockHeight block_height = 5;
  uint64 parent_slot = 6;
  string parent_blockhash = 7;
  uint64 executed_transaction_count = 8;
}

message SubscribeUpdatePing {}

// non-streaming methods

// for testing purposes
// Ping is used to check if the server is up and to measure the response time.
message PingRequest {
  int32 count = 1;
}

message PongResponse {
  int32 count = 1;
}

message GetLatestBlockhashRequest {}
message GetLatestBlockhashResponse {
  // The latest blockhash
  uint64 slot = 1;
  string blockhash = 2;
  uint64 lastValidBlockHeight = 3;
}

message GetBlockHeightRequest {}
message GetBlockHeightResponse {
  uint64 BlockHeight = 1;
}

message GetSlotRequest {}
message GetSlotResponse {
  uint64 slot = 1;
}

