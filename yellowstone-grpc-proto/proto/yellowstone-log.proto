syntax = "proto3";

import public "geyser.proto";


option go_package = "github.com/rpcpool/solana-geyser-grpc/golang/proto";

package yellowstone.log;

service YellowstoneLog {
  rpc CreateStaticConsumerGroup(CreateStaticConsumerGroupRequest) returns (CreateStaticConsumerGroupResponse) {}
  rpc Consume(ConsumeRequest) returns (stream geyser.SubscribeUpdate) {}
}

message CreateStaticConsumerGroupResponse {
  string group_id = 1;
}

message CreateStaticConsumerGroupRequest {
  repeated string instance_id_list = 2;
  repeated string redundancy_instance_id_list = 3;
}

enum PartitionAssignmentStrategy {
  STATIC = 0;
}


/// The InitialOffsetPolicy enum determines the initial offset used when subscribing to events or messages. It provides three options:
/// 
/// EARLIEST (0)
/// This policy subscribes to events or messages starting from the earliest available offset in the data stream. It ensures that all historical data is consumed from the beginning.
/// 
/// LATEST (1)
/// Subscribes to events or messages starting from the latest available offset in the data stream. It only consumes new events or messages generated after the subscription is initiated.
/// 
/// SLOT (2)
/// This policy subscribes to events or messages starting from a specific slot number in the data stream. It allows for precise control over where consumption begins based on slot numbers.
enum InitialOffsetPolicy {
  EARLIEST = 0;
  LATEST = 1;
  SLOT = 2;
}


/// The EventSubscriptionPolicy enum defines the types of events to subscribe to. It offers three options:
/// 
/// ACCOUNT_UPDATE_ONLY (0)
/// Subscribes to account update events exclusively. It filters out other types of events, focusing solely on account-related updates.
/// 
/// TRANSACTION_ONLY (1)
/// Subscribes to transaction events exclusively. It filters out non-transactional events, ensuring that only transaction-related data is consumed.
/// 
/// BOTH (2)
/// This policy subscribes to both account update and transaction events. It enables consumption of a wider range of event types, encompassing both account-related updates and transactions.
enum EventSubscriptionPolicy {
  ACCOUNT_UPDATE_ONLY = 0;
  TRANSACTION_ONLY = 1;
  BOTH = 2;
}

/// Timeline Translation Policy
/// The TimelineTranslationPolicy enum defines different strategies for translating users to timelines based on their last seen slot number or a specified lag. This is particularly useful for managing data consumption in conjunction with the ConsumeRequest.ttp_maximum_slot_lag parameter.
/// 
/// ALLOW_LAG
/// This policy allows users to be translated to a timeline that contains the last seen slot number or up to a certain lag. It extends the allowable lag for eligible timelines.
/// 
/// Example:
/// 
/// Suppose we have three timelines with the latest available slot numbers:
/// 
/// timeline1 : 10
/// timeline2 : 5
/// timeline3 : 8
/// If a consumer is assigned to timeline1 with ttp_maximum_slot_lag set to 2, then the only eligible destination timeline would be timeline3.
/// 
/// STRICT_SLOT
/// Under this policy, eligible destination timelines must contain the last seen slot number in the current consumer timeline; otherwise, the translation fails. This ensures strict adherence to slot numbers when translating users to timelines.
enum TimelineTranslationPolicy {
  ALLOW_LAG = 0;
  STRICT_SLOT = 1;
}

/// The ConsumeRequest message defines parameters for consuming events or messages from a data stream. It includes the following fields:
/// 
/// consumer_id (1)
/// An optional string representing the consumer's unique identifier.
/// 
/// initial_offset_policy (2)
/// Specifies the initial offset policy for subscribing to events. It uses values from the InitialOffsetPolicy enum.
/// 
/// at_slot (3)
/// An optional int64 indicating the specific slot number from which consumption should start. This is relevant when initial_offset_policy is set to SLOT.
/// 
/// event_subscription_policy (4)
/// Defines the event subscription policy using values from the EventSubscriptionPolicy enum.
/// 
/// account_update_event_filter (5)
/// An optional AccountUpdateEventFilter message specifying filters for account update events.
/// 
/// tx_event_filter (6)
/// An optional TransactionEventFilter message defining filters for transaction events.
/// 
/// commitment_level (7)
/// Specifies the commitment level for consuming events. It uses values from the geyser.CommitmentLevel enum.
/// 
/// timelineTranslationPolicy (8)
/// An optional TimelineTranslationPolicy describing the policy for triggering timeline translation when an ingester is out of service and consumers need to be translated to a different ingestion timeline.
/// 
/// ttp_maximum_slot_lag (9)
/// An optional uint32 indicating the maximum slot lag allowed for timeline translation.
message ConsumeRequest {
  optional string consumer_group_id = 1;
  optional string consumer_id = 2;
  optional string instance_id = 3;
  
  InitialOffsetPolicy initial_offset_policy = 4;
  geyser.CommitmentLevel commitment_level = 5;
  EventSubscriptionPolicy event_subscription_policy = 6;

  optional int64 at_slot = 7;
  optional AccountUpdateEventFilter account_update_event_filter = 8;
  optional TransactionEventFilter tx_event_filter = 9;

  // timelineTranslationPolicy is used when an ingester is out of service and we need to translate a set
  // of consumer to a different ingestion timeline. The policy describe what to do when we need to trigger timeline translation.
  optional TimelineTranslationPolicy timelineTranslationPolicy = 10;
  optional uint32 ttp_maximum_slot_lag = 11;
}

/// The AccountUpdateEventFilter message defines filters for account update events. It includes the following fields:
/// 
/// pubkeys (1)
/// A repeated field of bytes representing public keys. Events matching any of these public keys will be included in the filtered results.
/// 
/// owners (2)
/// A repeated field of bytes representing account owners. Events matching any of these account owners will be included in the filtered results.
message AccountUpdateEventFilter {
  repeated bytes pubkeys = 1;
  repeated bytes owners = 2;
}

/// The TransactionEventFilter message specifies filters for transaction events. It contains the following field:

/// account_keys (1)
/// A repeated field of bytes representing account keys. Events associated with any of these account keys will be included in the filtered results.
message TransactionEventFilter {
  repeated bytes account_keys = 1;
}